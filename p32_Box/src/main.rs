// Box<T> :是一个指针，不会基于它指向数据的大小变化而变化
// 允许在Heap上存储数据，而不是Stack
// 实现了Deref和Drop trait

// 使用场景
// 1、在编译时，某类型大小无法确定。但在使用该类型时，上下文却需要知道它的确切大小
// 2、当你有大量数据，想移交所有权，但需要确保在操作时数据不会复制
// 3、使用某个值时，只关心是否实现了特定的trait而不关心它的具体类型
fn main() {
    let a = Box::new(5);
    println!("{}", a);
}

// Rust如何确定为枚举分配的空间大小
// 会遍历enum中的每一个变体，确定最大的变体占用的空间，如下编译不会通过，因为编译器无法确定Cons变体的大小，因此需要Box进行包装
// enum Node {
//     Cons(i32,Node),
//     Nil,
// }
enum Node {
    Cons(i32, Box<Node>),
    Nil,
}
